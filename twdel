#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;

use Carp;
use Config::Pit;
use Net::Twitter;
use Data::Dumper;
use Getopt::Long;
use Pod::Usage;
require "twdel_keys.conf";


main();

sub main {
    my $start_page = 2;
    my $end_page = 100;
    my $help = 0;
    my $options = GetOptions("start-page=i" => \$start_page,
                             "end-page=i"   => \$end_page,
                             "help"         => \$help);
    if ($help) {
        pod2usage(2);
    }
    say "Acquiring Net::Twitter object...";
    my $nt = get_nt();
    say "Acquired Net::Twitter object successfully";
    say ratelimit($nt);
    for my $page ($start_page .. $end_page) {
        say "Getting user timeline page #$page " . ratelimit($nt);
        my $statuses = $nt->user_timeline({ page => $page });
        for my $status (@{$statuses}) {
            my $id = $status->{id};
            say "Deleting status #$id";
            $nt->destroy_status($id);
        }
    }

}

sub ratelimit {
    my $nt = shift;
    my $rest = $nt->rate_remaining;
    my $limit = $nt->rate_limit;
    my $next_epoch = $nt->rate_reset;
    my ($sec,$min,$hour,$day,$month,$year,$wdy,$yday) = localtime($next_epoch);
    $year += 1900;
    $month++;
    my $next_reset = sprintf "%04d/%02d/%02d %02d:%02d:%02d", $year, $month, $day, $hour, $min, $sec;
    return "API $rest/$limit next reset at $next_reset";
}

sub get_nt {
    my $config = pit_get("twitter_twdel", get => {
            access_token => "access_token",
            access_token_secret => "access_token_secret",
        });
    if (!defined $config->{access_token} or !defined $config->{access_token_secret}) {
        die "Authentication information is not set. Run authenticate first.";
    }
    no warnings;
    $config->{consumer_key} = $_::consumer_key;
    $config->{consumer_secret} = $_::consumer_secret;
    use warnings;
    #print Dumper([$config]);

    my $nt = Net::Twitter->new(
        traits => [qw/OAuth API::REST RateLimit/],
        consumer_key => $config->{consumer_key},
        consumer_secret => $config->{consumer_secret},
        access_token => $config->{access_token},
        access_token_secret => $config->{access_token_secret},
    );
    if (!defined $nt) {
        die "Authentication Failed: $!";
    }
    return $nt;
}

__END__

=head1 Twdel

Twdel - Twitter history remover -

=head1 SYNOPSIS

twdel [options]

 Options:
  -start-page           First page index of removal [2]
  -end-page             Last page index of removel [100]

=head1 OPTIONS

=over 8

=item B<-start-page>

First page index of removal
2 for default

=item B<-end-page>

Last page index of removal
100 for default

=back

=cut

